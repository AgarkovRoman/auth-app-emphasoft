{"version":3,"sources":["context/auth.js","components/Form/Form.js","pages/login/Login.js","pages/firstTask/firstTask.js","PrivateRoute.js","pages/home/Home.js","App.js","serviceWorker.js","index.js"],"names":["AuthContext","createContext","useAuth","useContext","Form","props","useForm","register","handleSubmit","errors","useState","isLoggedIn","setLoggedIn","setUserName","setPassword","setAuthTokens","data","a","axios","post","response","status","console","log","token","username","password","to","className","onSubmit","id","type","tabIndex","placeholder","name","ref","required","minLength","maxLength","htmlFor","Login","UsersFetching","users","map","user","key","First","rows","setUsers","q","setQ","sortType","setSortType","axiosInstance","create","baseURL","headers","useEffect","get","then","catch","e","onClick","reverse","value","onChange","target","filter","row","toLowerCase","indexOf","PrivateRoute","Component","component","rest","authTokens","render","Home","App","existingTokens","JSON","parse","localStorage","getItem","Provider","setItem","stringify","exact","path","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.513c88e6.chunk.js","sourcesContent":["import { createContext, useContext } from 'react';\n\nexport const AuthContext = createContext();\n\nexport function useAuth() {\n    return useContext(AuthContext);\n}\n","import React, { useEffect, useState } from 'react';\nimport './Form.sass';\nimport { useForm } from 'react-hook-form';\nimport axios from 'axios';\nimport { useAuth } from \"../../context/auth\";\nimport { Redirect } from \"react-router-dom\";\n\nfunction Form(props) {\n    const { register, handleSubmit, errors } = useForm();\n\n    const [isLoggedIn, setLoggedIn] = useState(false);\n    const [userName, setUserName] = useState(\"\");\n    const [password, setPassword] = useState(\"\");\n    const { setAuthTokens } = useAuth();\n\n    async function postLogin(data) {\n        try {\n            const response = await axios.post('https://emphasoft-test-assignment.herokuapp.com/api-token-auth/', data);\n            if (response.status === 200) {\n                console.log('200', response.data.token);\n                setAuthTokens(response.data);\n                setLoggedIn(true);\n\n                setUserName(data.username);\n                setPassword(data.password);\n\n                // console.log('username', data.username);\n                // console.log('password', data.password);\n                // console.log('name', userName)\n                // console.log('password', password)\n                // console.log('token', response.data.token)\n            }\n\n        } catch (e) {\n            console.log(e);\n        }\n    }\n    console.log(errors);\n\n    if (isLoggedIn) {\n        return <Redirect to=\"/\" />;\n    }\n\n    return (\n        <div className=\"login-form-wrap\">\n            <div className=\"hello-box\">\n                <form className=\"form\" onSubmit={handleSubmit(postLogin)}>\n                    <div className=\"form-log-in\" id=\"form-log-in\">\n                        <div className=\"form__group\">\n                            <label className=\"form__label\">UserName</label>\n                            <input\n                                className=\"form__input\"\n                                type=\"text\"\n                                tabIndex=\"1\"\n                                placeholder=\"Enter UserName\"\n                                name=\"username\"\n                                ref={register({ required: true, minLength: 3, maxLength: 30 })}\n                            />\n                            {errors.username && errors.username.type === 'required' && <p className=\"error\">This is required field</p>}\n                            {errors.username && errors.username.type === 'minLength' && <p className=\"error\">UserName should be more then 3 symbols</p>}\n                            {errors.username && errors.username.type === 'maxLength' && <p className=\"error\">UserName should be less then 30 symbols</p>}\n\n                        </div>\n                        <div className=\"form__group\">\n                            <label className=\"form__label\" htmlFor=\"Password\">Password</label>\n                            <input\n                                className=\"form__input\"\n                                type=\"password\"\n                                tabIndex=\"2\"\n                                placeholder=\"Enter password\"\n                                name=\"password\"\n                                ref={register({ required: true, minLength: 6, maxLength: 30 })}\n                            />\n                            {errors.password && errors.password.type === 'required' && <p className=\"error\">This is required field</p>}\n                            {errors.password && errors.password.type === 'minLength' && <p className=\"error\">UserName should be more then 6 symbols</p>}\n                            {errors.password && errors.password.type === 'maxLength' && <p className=\"error\">UserName should be less then 30 symbols</p>}\n                        </div>\n                        <div className=\"form__group\">\n                            <button className=\"button form__button button--blue\" type=\"submit\">Login</button>\n                        </div>\n                    </div>\n                </form>\n            </div>\n        </div>\n\n    );\n}\n\nexport default Form;\n","import React from \"react\";\nimport Form from \"../../components/Form/Form\";\nimport '../../App.sass';\n\nfunction Login(props) {\n    return (\n        <>\n            <h1 className=\"main-title\">Hi! Log in, please</h1>\n            <Form props={props}/>\n        </>\n    )\n}\n\nexport default Login;\n","import React, {useEffect, useState} from \"react\";\nimport './firstTask.sass'\nimport axios from \"axios\";\n\nfunction First() {\n    const [users, setUsers] = useState([]);\n    const [q, setQ] = useState('');\n    const [sortType, setSortType] = useState('inc')\n\n    const axiosInstance = axios.create({\n        // baseURL: 'http://emphasoft-test-assignment.herokuapp.com/',\n        baseURL: 'https://jsonplaceholder.typicode.com/',\n        // withCredentials: false,\n        headers: {\n            // 'Content-Type' : 'application/json',\n            // 'Accept' : 'application/json',\n            // 'Authorization' : '781bd9f1de084f4daa7ba2aa8a71a2eab855354e',\n            // \"Authorization\": {\n            //                     username: 'test_super',\n            //                     password: 'Nf<U4f<rDbtDxAPn'\n            // }\n            // \"X-CSRFToken\": \"NjTJZ8rN98YmDnRO5qjvw5GKeAgCGNBqal6kJp2NQQYLWloF4EvH36ss1m8tRlwm\"\n        }\n    })\n\n    useEffect(() => {\n        // axiosInstance.get('api/v1/users/')\n        axiosInstance.get('users')\n            .then(response => {\n                setUsers(response.data)\n            })\n            .catch(e => {\n                console.log(e)\n            })\n    }, [])\n\n    function search(rows) {\n        return rows.filter(row => row.username.toLowerCase().indexOf(q) > -1)\n    }\n\n    function SortById() {\n        if (sortType === 'inc') {\n            setUsers(users.reverse());\n            setSortType('dec')\n        } else if (sortType === 'dec') {\n            setUsers(users.reverse());\n            setSortType('inc')\n        }\n    }\n\n    return (\n        <div className=\"wrapper\">\n            <h1 className=\"main-title\">First task</h1>\n            <div className=\"controllers-container\">\n                <button className=\"button form__button button--blue\" onClick={SortById}>SortById</button>\n                <input className=\"form__input\" type=\"text\" value={q} onChange={e => setQ(e.target.value)} placeholder=\"Find someone\"/>\n            </div>\n            <UsersFetching users={search(users)} setUsers={setUsers}/>\n        </div>\n    )\n}\n\nfunction UsersFetching({users}) {\n\n    return (\n        <ul className='user-list'>\n            {\n                users.map(user => <li key={user.id}>{`id:${user.id} — ${user.username}`}</li>)\n            }\n        </ul>\n    )\n}\n\nexport default First;\n","import React from 'react';\nimport { Redirect, Route } from 'react-router-dom';\nimport { useAuth } from \"./context/auth\";\n\nfunction PrivateRoute({ component: Component, ...rest }) {\n    const { authTokens } = useAuth();\n\n    return (\n        <Route {...rest} render={(props) =>\n            authTokens\n                ? (<Component {...props} />)\n                : (<Redirect to=\"/auth-app-emphasoft\" />)}\n        />\n    );\n}\n\nexport default PrivateRoute;\n","import React from \"react\";\nimport '../../App.sass';\nimport {Link} from \"react-router-dom\";\n\nfunction Home() {\n    return (\n        <>\n            <h1 className=\"main-title\">Home</h1>\n            <ul>\n                <li className='first-link'>\n                    <Link to=\"/first\" className=\"link\">First task</Link>\n                </li>\n            </ul>\n        </>\n    )\n}\n\nexport default Home;\n","import React, { useState } from 'react';\nimport './App.sass';\nimport { Route, Switch, Redirect, withRouter, Link } from 'react-router-dom';\nimport Login from './pages/login/Login';\nimport First from './pages/firstTask/firstTask';\nimport { AuthContext } from './context/auth';\nimport PrivateRoute from \"./PrivateRoute\";\nimport Home from \"./pages/home/Home\";\n\nfunction App(props) {\n\n    const existingTokens = JSON.parse(localStorage.getItem(\"tokens\"));\n    const [authTokens, setAuthTokens] = useState(existingTokens);\n\n    const setTokens = (data) => {\n        localStorage.setItem(\"tokens\", JSON.stringify(data));\n        setAuthTokens(data);\n    }\n\n    return (\n        <>\n            <AuthContext.Provider value={{ authTokens, setAuthTokens: setTokens }}>\n                <div>\n                    <Switch>\n                        <PrivateRoute exact path=\"/\" component={Home} />\n                        <Route exact path=\"/auth-app-emphasoft\" component={Login} />\n                        <PrivateRoute path=\"/first\" component={First} />\n                    </Switch>\n                </div>\n            </AuthContext.Provider>\n        </>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { BrowserRouter } from 'react-router-dom';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}